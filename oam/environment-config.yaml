# Example: Using environment variables for container images
apiVersion: core.oam.dev/v1beta1
kind: Application
metadata:
  name: env-based-chatbot
  namespace: default
spec:
  components:
    - name: chatbot
      type: rasa-chatbot
      properties:
        # Read Docker Hub username from environment
        rasaImage: "${DOCKER_HUB_USERNAME:-socrates12345}/chat-template-rasa:${IMAGE_TAG:-latest}"
        actionsImage: "${DOCKER_HUB_USERNAME:-socrates12345}/chat-template-actions:${IMAGE_TAG:-latest}"
        
        minScale: 1
        maxScale: 5
        enableIstioGateway: true
        chatbotHost: "${CHATBOT_HOST:-chatbot.local}"

---
# Example: Using Kubernetes ConfigMap for configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: chatbot-config
  namespace: default
data:
  DOCKER_HUB_USERNAME: "socrates12345"
  IMAGE_TAG: "latest"
  CHATBOT_HOST: "chat.example.com"

---
# Example: Using the ConfigMap in Application
apiVersion: core.oam.dev/v1beta1
kind: Application
metadata:
  name: configmap-chatbot
  namespace: default
spec:
  components:
    - name: chatbot
      type: rasa-chatbot
      properties:
        # These would be resolved by KubeVela from ConfigMap
        rasaImage: "socrates12345/chat-template-rasa:latest"
        actionsImage: "socrates12345/chat-template-actions:latest"
        
        enableIstioGateway: true
        chatbotHost: "chat.example.com"
        minScale: 1
        maxScale: 10
      traits:
        - type: env
          properties:
            # Environment variables from ConfigMap
            env:
              DOCKER_HUB_USERNAME:
                valueFrom:
                  configMapKeyRef:
                    name: chatbot-config
                    key: DOCKER_HUB_USERNAME
              IMAGE_TAG:
                valueFrom:
                  configMapKeyRef:
                    name: chatbot-config
                    key: IMAGE_TAG

---
# Example: Using Secrets for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: chatbot-secrets
  namespace: default
type: Opaque
data:
  # Base64 encoded values
  DOCKER_HUB_TOKEN: "your-base64-encoded-token"
  
---
# Example: Application with secrets
apiVersion: core.oam.dev/v1beta1
kind: Application
metadata:
  name: secure-chatbot
  namespace: default
spec:
  components:
    - name: chatbot
      type: rasa-chatbot
      properties:
        rasaImage: "socrates12345/chat-template-rasa:latest"
        actionsImage: "socrates12345/chat-template-actions:latest"
        
        enableIstioGateway: true
        chatbotHost: "secure-chat.example.com"
        enableTLS: true
        minScale: 2
        maxScale: 20
      traits:
        - type: env
          properties:
            env:
              DOCKER_HUB_TOKEN:
                valueFrom:
                  secretKeyRef:
                    name: chatbot-secrets
                    key: DOCKER_HUB_TOKEN