apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: rasa-chatbot
  namespace: vela-system
  annotations:
    definition.oam.dev/description: "A Rasa-based chatbot component using Knative services for auto-scaling and serverless deployment"
spec:
  workload:
    definition:
      apiVersion: serving.knative.dev/v1
      kind: Service
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "serving.knative.dev/v1"
          kind:       "Service"
          metadata: {
            name: context.name + "-rasa"
            namespace: context.namespace
            annotations: {
              "autoscaling.knative.dev/minScale": "\(parameter.minScale)"
              "autoscaling.knative.dev/maxScale": "\(parameter.maxScale)"
              "autoscaling.knative.dev/target": "\(parameter.targetConcurrency)"
              if parameter.scaleToZero {
                "autoscaling.knative.dev/scale-to-zero-pod-retention-period": "1m"
              }
            }
          }
          spec: {
            template: {
              metadata: {
                annotations: {
                  "autoscaling.knative.dev/minScale": "\(parameter.minScale)"
                  "autoscaling.knative.dev/maxScale": "\(parameter.maxScale)"
                  "run.googleapis.com/cpu-throttling": "false"
                }
              }
              spec: {
                containerConcurrency: parameter.targetConcurrency
                containers: [{
                  name:  "rasa-server"
                  image: parameter.rasaImage
                  ports: [{
                    containerPort: 5005
                    name: "http1"
                  }]
                  env: [
                    {
                      name: "RASA_VERSION"
                      value: parameter.rasaVersion
                    },
                    {
                      name: "ACTION_ENDPOINT_URL"
                      value: "http://\(context.name)-actions.\(context.namespace).svc.cluster.local/webhook"
                    }
                  ]
                  resources: {
                    requests: {
                      memory: parameter.rasaMemory
                      cpu:    parameter.rasaCpu
                    }
                    limits: {
                      memory: parameter.rasaMemoryLimit
                      cpu:    parameter.rasaCpuLimit
                    }
                  }
                  livenessProbe: {
                    httpGet: {
                      path: "/api/status"
                      port: 5005
                    }
                    initialDelaySeconds: 30
                    periodSeconds: 10
                    timeoutSeconds: 5
                  }
                  readinessProbe: {
                    httpGet: {
                      path: "/api/status"
                      port: 5005
                    }
                    initialDelaySeconds: 5
                    periodSeconds: 5
                    timeoutSeconds: 3
                  }
                }]
              }
            }
          }
        }

        outputs: {
          "actions-service": {
            apiVersion: "serving.knative.dev/v1"
            kind:       "Service"
            metadata: {
              name: context.name + "-actions"
              namespace: context.namespace
              annotations: {
                "autoscaling.knative.dev/minScale": "\(parameter.actionsMinScale)"
                "autoscaling.knative.dev/maxScale": "\(parameter.actionsMaxScale)"
                "autoscaling.knative.dev/target": "\(parameter.actionsTargetConcurrency)"
                if parameter.scaleToZero {
                  "autoscaling.knative.dev/scale-to-zero-pod-retention-period": "30s"
                }
              }
            }
            spec: {
              template: {
                metadata: {
                  annotations: {
                    "autoscaling.knative.dev/minScale": "\(parameter.actionsMinScale)"
                    "autoscaling.knative.dev/maxScale": "\(parameter.actionsMaxScale)"
                  }
                }
                spec: {
                  containerConcurrency: parameter.actionsTargetConcurrency
                  containers: [{
                    name:  "actions-server"
                    image: parameter.actionsImage
                    ports: [{
                      containerPort: 5055
                      name: "http1"
                    }]
                    env: [
                      {
                        name: "RASA_SDK_VERSION"
                        value: parameter.rasaSdkVersion
                      }
                    ]
                    resources: {
                      requests: {
                        memory: parameter.actionsMemory
                        cpu:    parameter.actionsCpu
                      }
                      limits: {
                        memory: parameter.actionsMemoryLimit
                        cpu:    parameter.actionsCpuLimit
                      }
                    }
                    livenessProbe: {
                      httpGet: {
                        path: "/health"
                        port: 5055
                      }
                      initialDelaySeconds: 10
                      periodSeconds: 10
                      timeoutSeconds: 3
                    }
                    readinessProbe: {
                      httpGet: {
                        path: "/health"
                        port: 5055
                      }
                      initialDelaySeconds: 5
                      periodSeconds: 5
                      timeoutSeconds: 3
                    }
                  }]
                }
              }
            }
          }

          if parameter.enableIstioGateway {
            "istio-gateway": {
              apiVersion: "networking.istio.io/v1beta1"
              kind:       "Gateway"
              metadata: {
                name: context.name + "-gateway"
                namespace: context.namespace
              }
              spec: {
                selector: {
                  istio: "ingressgateway"
                }
                servers: [{
                  port: {
                    number: 80
                    name: "http"
                    protocol: "HTTP"
                  }
                  hosts: [parameter.chatbotHost]
                  if parameter.enableTLS {
                    tls: {
                      httpsRedirect: true
                    }
                  }
                }]
                if parameter.enableTLS {
                  servers: [{
                    port: {
                      number: 443
                      name: "https"
                      protocol: "HTTPS"
                    }
                    hosts: [parameter.chatbotHost]
                    tls: {
                      mode: "SIMPLE"
                      credentialName: context.name + "-tls-secret"
                    }
                  }]
                }
              }
            }
            
            "rasa-virtualservice": {
              apiVersion: "networking.istio.io/v1beta1"
              kind:       "VirtualService"
              metadata: {
                name: context.name + "-rasa-vs"
                namespace: context.namespace
              }
              spec: {
                hosts: [parameter.chatbotHost]
                gateways: [context.name + "-gateway"]
                http: [{
                  match: [{
                    uri: {
                      prefix: "/api"
                    }
                  }, {
                    uri: {
                      prefix: "/webhooks"
                    }
                  }, {
                    uri: {
                      prefix: "/conversations"
                    }
                  }]
                  route: [{
                    destination: {
                      host: context.name + "-rasa.default.svc.cluster.local"
                      port: {
                        number: 80
                      }
                    }
                  }]
                  headers: {
                    request: {
                      set: {
                        "X-Forwarded-Proto": "https"
                      }
                    }
                  }
                  corsPolicy: {
                    allowOrigins: [{
                      regex: ".*"
                    }]
                    allowMethods: ["GET", "POST", "OPTIONS"]
                    allowHeaders: ["Content-Type", "Authorization"]
                    maxAge: "24h"
                  }
                }]
              }
            }

            if parameter.exposeActions {
              "actions-virtualservice": {
                apiVersion: "networking.istio.io/v1beta1"
                kind:       "VirtualService"
                metadata: {
                  name: context.name + "-actions-vs"
                  namespace: context.namespace
                }
                spec: {
                  hosts: [parameter.actionsHost]
                  gateways: [context.name + "-gateway"]
                  http: [{
                    match: [{
                      uri: {
                        prefix: "/webhook"
                      }
                    }, {
                      uri: {
                        prefix: "/health"
                      }
                    }]
                    route: [{
                      destination: {
                        host: context.name + "-actions.default.svc.cluster.local"
                        port: {
                          number: 80
                        }
                      }
                    }]
                  }]
                }
              }
            }
          }
        }

        parameter: {
          // Container Images
          rasaImage: string
          actionsImage: string
          
          // Versions
          rasaVersion: *"3.6.21" | string
          rasaSdkVersion: *"3.6.2" | string
          
          // Rasa Server Resources
          rasaMemory: *"1Gi" | string
          rasaCpu: *"500m" | string
          rasaMemoryLimit: *"2Gi" | string
          rasaCpuLimit: *"1000m" | string
          
          // Actions Server Resources
          actionsMemory: *"512Mi" | string
          actionsCpu: *"250m" | string
          actionsMemoryLimit: *"1Gi" | string
          actionsCpuLimit: *"500m" | string
          
          // Knative Scaling - Rasa Server
          minScale: *1 | int
          maxScale: *10 | int
          targetConcurrency: *10 | int
          scaleToZero: *false | bool
          
          // Knative Scaling - Actions Server
          actionsMinScale: *0 | int
          actionsMaxScale: *5 | int
          actionsTargetConcurrency: *5 | int
          
          // Networking with Istio
          enableIstioGateway: *true | bool
          chatbotHost: *"chatbot.local" | string
          enableTLS: *false | bool
          
          // Actions External Access
          exposeActions: *false | bool
          actionsHost: *"actions.local" | string
        }